import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Imu
import smbus
import time
import math
 
# Dirección I2C del MPU6050
MPU6050_ADDR = 0x68
 
# Registros del MPU6050
PWR_MGMT_1 = 0x6B
ACCEL_XOUT_H = 0x3B
GYRO_XOUT_H = 0x43
 
class MPU6050Node(Node):
    def __init__(self):
        super().__init__('mpu6050_node')
        # Inicializa el bus I2C
        self.bus = smbus.SMBus(1)  # Bus 1 para Raspberry Pi u otro sistema con I2C
        self.bus.write_byte_data(MPU6050_ADDR, PWR_MGMT_1, 0)  # Activa el MPU6050
        # Variables de ángulo y offset
        self.angulo_x = 0.0
        self.angulo_y = 0.0
        self.angulo_z = 0.0
        self.offset_x = 0.0
        self.offset_y = 0.0
        self.offset_z = 0.0
        self.tiempo_anterior = time.time()
        # Calibración de offset
        self.calibrate_gyro()
 
        # Publicador de datos de IMU
        self.imu_publisher = self.create_publisher(Imu, 'mpu6050/imu', 10)
        self.timer = self.create_timer(0.1, self.publish_imu_data)  # Publica cada 0.1 segundos
 
    def read_raw_data(self, addr):
        # Lee datos de dos bytes y los combina
        high = self.bus.read_byte_data(MPU6050_ADDR, addr)
        low = self.bus.read_byte_data(MPU6050_ADDR, addr + 1)
        value = (high << 8) | low
        if value > 32768:
            value = value - 65536
        return value
 
    def calibrate_gyro(self):
        # Toma varias lecturas para calcular el offset en cada eje
        num_samples = 100
        total_x = 0
        total_y = 0
        total_z = 0
 
        self.get_logger().info("Calibrando giroscopio...")
 
        for _ in range(num_samples):
            gx = self.read_raw_data(GYRO_XOUT_H)
            gy = self.read_raw_data(GYRO_XOUT_H + 2)
            gz = self.read_raw_data(GYRO_XOUT_H + 4)
            total_x += gx
            total_y += gy
            total_z += gz
            time.sleep(0.01)  # Espera 10 ms entre lecturas
 
        # Calcular el promedio de cada eje
        self.offset_x = total_x / num_samples
        self.offset_y = total_y / num_samples
        self.offset_z = total_z / num_samples
 
        self.get_logger().info(f"Offset calculado - X: {self.offset_x}, Y: {self.offset_y}, Z: {self.offset_z}")
 
    def publish_imu_data(self):
        # Lee datos del giroscopio y aplica el offset
        gx = (self.read_raw_data(GYRO_XOUT_H) - self.offset_x) / 131.0  # Velocidad angular en X
        gy = (self.read_raw_data(GYRO_XOUT_H + 2) - self.offset_y) / 131.0  # Velocidad angular en Y
        gz = (self.read_raw_data(GYRO_XOUT_H + 4) - self.offset_z) / 131.0  # Velocidad angular en Z
        # Calcula el tiempo transcurrido
        tiempo_actual = time.time()
        dt = tiempo_actual - self.tiempo_anterior
        self.tiempo_anterior = tiempo_actual
        # Integración para calcular ángulos
        self.angulo_x += gx * dt
        self.angulo_y += gy * dt
        self.angulo_z += gz * dt
 
        # Crear y publicar mensaje de IMU
        imu_msg = Imu()
        imu_msg.header.stamp = self.get_clock().now().to_msg()
        imu_msg.header.frame_id = 'mpu6050_link'
        # Asignar datos de orientación
        imu_msg.orientation.x = math.radians(self.angulo_x)
        imu_msg.orientation.y = math.radians(self.angulo_y)
        imu_msg.orientation.z = math.radians(self.angulo_z)
 
        # Publica el mensaje
        self.imu_publisher.publish(imu_msg)
        self.get_logger().info(f'Angulos - X: {self.angulo_x:.2f}, Y: {self.angulo_y:.2f}, Z: {self.angulo_z:.2f}')
 
def main(args=None):
    rclpy.init(args=args)
    mpu6050_node = MPU6050Node()
 
    try:
        rclpy.spin(mpu6050_node)
    except KeyboardInterrupt:
        pass
    finally:
        mpu6050_node.destroy_node()
        rclpy.shutdown()
 
if __name__ == '__main__':
    main()
